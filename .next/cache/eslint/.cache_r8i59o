[{"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/App.tsx":"1","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/layout.tsx":"2","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/page.tsx":"3","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/supabase.ts":"4","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AdminDashboard.tsx":"5","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AnimatedBackground.tsx":"6","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AuthForm.tsx":"7","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/CareerConsultationModal.tsx":"8","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ChatModal.tsx":"9","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ClientDashboard.tsx":"10","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ImportSurveyModal.tsx":"11","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/MonitorDashboard.tsx":"12","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ProfileModal.tsx":"13","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/SupportDashboard.tsx":"14","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/WelcomeScreen.tsx":"15","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ui/sparkles.tsx":"16","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/config/supabase.ts":"17","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/hooks/useAuth.ts":"18","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/lib/utils.ts":"19","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/types/index.ts":"20","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/utils/surveyParser.ts":"21","/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/utils/testSurveyImport.ts":"22"},{"size":8540,"mtime":1756398925002,"results":"23","hashOfConfig":"24"},{"size":469,"mtime":1756400634995,"results":"25","hashOfConfig":"24"},{"size":9553,"mtime":1756400615370,"results":"26","hashOfConfig":"24"},{"size":1263,"mtime":1756400493356,"results":"27","hashOfConfig":"24"},{"size":70389,"mtime":1756400510690,"results":"28","hashOfConfig":"24"},{"size":5651,"mtime":1756398925005,"results":"29","hashOfConfig":"24"},{"size":29708,"mtime":1756399978467,"results":"30","hashOfConfig":"24"},{"size":14614,"mtime":1756399978467,"results":"31","hashOfConfig":"24"},{"size":17811,"mtime":1756400034360,"results":"32","hashOfConfig":"24"},{"size":44732,"mtime":1756400069689,"results":"33","hashOfConfig":"24"},{"size":11207,"mtime":1756400104284,"results":"34","hashOfConfig":"24"},{"size":58221,"mtime":1756400229247,"results":"35","hashOfConfig":"24"},{"size":40472,"mtime":1756400257347,"results":"36","hashOfConfig":"24"},{"size":30737,"mtime":1756400289878,"results":"37","hashOfConfig":"24"},{"size":2628,"mtime":1756398925020,"results":"38","hashOfConfig":"24"},{"size":11682,"mtime":1756400312867,"results":"39","hashOfConfig":"24"},{"size":933,"mtime":1756400263568,"results":"40","hashOfConfig":"24"},{"size":39129,"mtime":1756400430461,"results":"41","hashOfConfig":"24"},{"size":165,"mtime":1756398925024,"results":"42","hashOfConfig":"24"},{"size":4099,"mtime":1756398925025,"results":"43","hashOfConfig":"24"},{"size":9855,"mtime":1756400450572,"results":"44","hashOfConfig":"24"},{"size":3397,"mtime":1756398925025,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uqorxs",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":16,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/App.tsx",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/layout.tsx",["112"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/page.tsx",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/app/supabase.ts",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AdminDashboard.tsx",["113","114","115","116","117"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AnimatedBackground.tsx",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/AuthForm.tsx",["118"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/CareerConsultationModal.tsx",["119"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ChatModal.tsx",["120"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ClientDashboard.tsx",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ImportSurveyModal.tsx",["139"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/MonitorDashboard.tsx",["140","141","142","143","144"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ProfileModal.tsx",["145"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/SupportDashboard.tsx",["146","147","148","149","150"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/WelcomeScreen.tsx",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/components/ui/sparkles.tsx",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/config/supabase.ts",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/hooks/useAuth.ts",["151"],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/lib/utils.ts",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/types/index.ts",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/utils/surveyParser.ts",[],[],"/Users/nsdkit/Documents/GitHub/fukui-platform-student/src/utils/testSurveyImport.ts",[],[],{"ruleId":"152","severity":1,"message":"153","line":7,"column":14,"nodeType":"154","messageId":"155","endLine":7,"endColumn":32},{"ruleId":"156","severity":2,"message":"157","line":15,"column":70,"nodeType":"158","messageId":"159","endLine":15,"endColumn":73,"suggestions":"160"},{"ruleId":"161","severity":2,"message":"162","line":27,"column":9,"nodeType":null,"messageId":"163","endLine":27,"endColumn":26},{"ruleId":"161","severity":2,"message":"164","line":53,"column":15,"nodeType":null,"messageId":"163","endLine":53,"endColumn":19},{"ruleId":"156","severity":2,"message":"157","line":830,"column":82,"nodeType":"158","messageId":"159","endLine":830,"endColumn":85,"suggestions":"165"},{"ruleId":"161","severity":2,"message":"164","line":1321,"column":15,"nodeType":null,"messageId":"163","endLine":1321,"endColumn":19},{"ruleId":"161","severity":2,"message":"166","line":62,"column":24,"nodeType":null,"messageId":"163","endLine":62,"endColumn":39},{"ruleId":"161","severity":2,"message":"167","line":2,"column":28,"nodeType":null,"messageId":"163","endLine":2,"endColumn":32},{"ruleId":"168","severity":1,"message":"169","line":26,"column":6,"nodeType":"170","endLine":26,"endColumn":12,"suggestions":"171"},{"ruleId":"156","severity":2,"message":"157","line":68,"column":64,"nodeType":"158","messageId":"159","endLine":68,"endColumn":67,"suggestions":"172"},{"ruleId":"156","severity":2,"message":"157","line":90,"column":45,"nodeType":"158","messageId":"159","endLine":90,"endColumn":48,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"174","line":320,"column":6,"nodeType":"170","endLine":320,"endColumn":16,"suggestions":"175"},{"ruleId":"156","severity":2,"message":"157","line":356,"column":49,"nodeType":"158","messageId":"159","endLine":356,"endColumn":52,"suggestions":"176"},{"ruleId":"156","severity":2,"message":"157","line":359,"column":63,"nodeType":"158","messageId":"159","endLine":359,"endColumn":66,"suggestions":"177"},{"ruleId":"156","severity":2,"message":"157","line":362,"column":58,"nodeType":"158","messageId":"159","endLine":362,"endColumn":61,"suggestions":"178"},{"ruleId":"156","severity":2,"message":"157","line":388,"column":52,"nodeType":"158","messageId":"159","endLine":388,"endColumn":55,"suggestions":"179"},{"ruleId":"156","severity":2,"message":"157","line":412,"column":49,"nodeType":"158","messageId":"159","endLine":412,"endColumn":52,"suggestions":"180"},{"ruleId":"156","severity":2,"message":"157","line":435,"column":57,"nodeType":"158","messageId":"159","endLine":435,"endColumn":60,"suggestions":"181"},{"ruleId":"161","severity":2,"message":"182","line":526,"column":13,"nodeType":null,"messageId":"163","endLine":526,"endColumn":24},{"ruleId":"156","severity":2,"message":"157","line":530,"column":20,"nodeType":"158","messageId":"159","endLine":530,"endColumn":23,"suggestions":"183"},{"ruleId":"156","severity":2,"message":"157","line":537,"column":65,"nodeType":"158","messageId":"159","endLine":537,"endColumn":68,"suggestions":"184"},{"ruleId":"156","severity":2,"message":"157","line":588,"column":31,"nodeType":"158","messageId":"159","endLine":588,"endColumn":34,"suggestions":"185"},{"ruleId":"156","severity":2,"message":"157","line":869,"column":46,"nodeType":"158","messageId":"159","endLine":869,"endColumn":49,"suggestions":"186"},{"ruleId":"168","severity":1,"message":"187","line":874,"column":6,"nodeType":"170","endLine":874,"endColumn":8,"suggestions":"188"},{"ruleId":"161","severity":2,"message":"189","line":905,"column":9,"nodeType":null,"messageId":"163","endLine":905,"endColumn":25},{"ruleId":"156","severity":2,"message":"157","line":905,"column":37,"nodeType":"158","messageId":"159","endLine":905,"endColumn":40,"suggestions":"190"},{"ruleId":"161","severity":2,"message":"191","line":905,"column":42,"nodeType":null,"messageId":"163","endLine":905,"endColumn":50},{"ruleId":"156","severity":2,"message":"157","line":197,"column":55,"nodeType":"158","messageId":"159","endLine":197,"endColumn":58,"suggestions":"192"},{"ruleId":"161","severity":2,"message":"193","line":13,"column":3,"nodeType":null,"messageId":"163","endLine":13,"endColumn":11},{"ruleId":"161","severity":2,"message":"194","line":16,"column":3,"nodeType":null,"messageId":"163","endLine":16,"endColumn":6},{"ruleId":"161","severity":2,"message":"195","line":23,"column":3,"nodeType":null,"messageId":"163","endLine":23,"endColumn":12},{"ruleId":"168","severity":1,"message":"196","line":69,"column":9,"nodeType":"197","endLine":171,"endColumn":4,"suggestions":"198"},{"ruleId":"161","severity":2,"message":"199","line":887,"column":18,"nodeType":null,"messageId":"163","endLine":887,"endColumn":27},{"ruleId":"161","severity":2,"message":"200","line":2,"column":43,"nodeType":null,"messageId":"163","endLine":2,"endColumn":53},{"ruleId":"161","severity":2,"message":"193","line":12,"column":3,"nodeType":null,"messageId":"163","endLine":12,"endColumn":11},{"ruleId":"161","severity":2,"message":"201","line":13,"column":3,"nodeType":null,"messageId":"163","endLine":13,"endColumn":11},{"ruleId":"168","severity":1,"message":"202","line":43,"column":11,"nodeType":"197","endLine":129,"endColumn":4},{"ruleId":"168","severity":1,"message":"203","line":131,"column":9,"nodeType":"197","endLine":144,"endColumn":4},{"ruleId":"168","severity":1,"message":"204","line":216,"column":9,"nodeType":"197","endLine":244,"endColumn":4},{"ruleId":"168","severity":1,"message":"205","line":115,"column":9,"nodeType":"197","endLine":323,"endColumn":4,"suggestions":"206"},"react-refresh/only-export-components","Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","Identifier","namedExport","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["207","208"],"@typescript-eslint/no-unused-vars","'handleImageUpload' is assigned a value but never used.","unusedVar","'data' is assigned a value but never used.",["209","210"],"'setSelectedRole' is assigned a value but never used.","'User' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchChatRooms' and 'setupRealtimeSubscription'. Either include them or remove the dependency array.","ArrayExpression",["211"],["212","213"],["214","215"],"React Hook useEffect has a missing dependency: 'fetchSurveys'. Either include it or remove the dependency array.",["216"],["217","218"],["219","220"],["221","222"],["223","224"],["225","226"],["227","228"],"'questionMap' is assigned a value but never used.",["229","230"],["231","232"],["233","234"],["235","236"],"React Hook useEffect has a missing dependency: 'fetchResponses'. Either include it or remove the dependency array.",["237"],"'getAnswerDisplay' is assigned a value but never used.",["238","239"],"'question' is defined but never used.",["240","241"],"'Calendar' is defined but never used.","'Eye' is defined but never used.","'Briefcase' is defined but never used.","The 'fetchData' function makes the dependencies of useEffect Hook (at line 67) change on every render. To fix this, wrap the definition of 'fetchData' in its own useCallback() Hook.","VariableDeclarator",["242"],"'userEmail' is defined but never used.","'TrendingUp' is defined but never used.","'FileText' is defined but never used.","The 'fetchChatRooms' function makes the dependencies of useEffect Hook (at line 35) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fetchChatRooms' in its own useCallback() Hook.","The 'fetchOnlineUsers' function makes the dependencies of useEffect Hook (at line 35) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fetchOnlineUsers' in its own useCallback() Hook.","The 'setupRealtimeSubscription' function makes the dependencies of useEffect Hook (at line 41) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'setupRealtimeSubscription' in its own useCallback() Hook.","The 'loadUserProfile' function makes the dependencies of useEffect Hook (at line 113) change on every render. To fix this, wrap the definition of 'loadUserProfile' in its own useCallback() Hook.",["243"],{"messageId":"244","fix":"245","desc":"246"},{"messageId":"247","fix":"248","desc":"249"},{"messageId":"244","fix":"250","desc":"246"},{"messageId":"247","fix":"251","desc":"249"},{"desc":"252","fix":"253"},{"messageId":"244","fix":"254","desc":"246"},{"messageId":"247","fix":"255","desc":"249"},{"messageId":"244","fix":"256","desc":"246"},{"messageId":"247","fix":"257","desc":"249"},{"desc":"258","fix":"259"},{"messageId":"244","fix":"260","desc":"246"},{"messageId":"247","fix":"261","desc":"249"},{"messageId":"244","fix":"262","desc":"246"},{"messageId":"247","fix":"263","desc":"249"},{"messageId":"244","fix":"264","desc":"246"},{"messageId":"247","fix":"265","desc":"249"},{"messageId":"244","fix":"266","desc":"246"},{"messageId":"247","fix":"267","desc":"249"},{"messageId":"244","fix":"268","desc":"246"},{"messageId":"247","fix":"269","desc":"249"},{"messageId":"244","fix":"270","desc":"246"},{"messageId":"247","fix":"271","desc":"249"},{"messageId":"244","fix":"272","desc":"246"},{"messageId":"247","fix":"273","desc":"249"},{"messageId":"244","fix":"274","desc":"246"},{"messageId":"247","fix":"275","desc":"249"},{"messageId":"244","fix":"276","desc":"246"},{"messageId":"247","fix":"277","desc":"249"},{"messageId":"244","fix":"278","desc":"246"},{"messageId":"247","fix":"279","desc":"249"},{"desc":"280","fix":"281"},{"messageId":"244","fix":"282","desc":"246"},{"messageId":"247","fix":"283","desc":"249"},{"messageId":"244","fix":"284","desc":"246"},{"messageId":"247","fix":"285","desc":"249"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"suggestUnknown",{"range":"290","text":"291"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"292","text":"293"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"294","text":"291"},{"range":"295","text":"293"},"Update the dependencies array to be: [fetchChatRooms, setupRealtimeSubscription, user]",{"range":"296","text":"297"},{"range":"298","text":"291"},{"range":"299","text":"293"},{"range":"300","text":"291"},{"range":"301","text":"293"},"Update the dependencies array to be: [fetchSurveys, user?.id]",{"range":"302","text":"303"},{"range":"304","text":"291"},{"range":"305","text":"293"},{"range":"306","text":"291"},{"range":"307","text":"293"},{"range":"308","text":"291"},{"range":"309","text":"293"},{"range":"310","text":"291"},{"range":"311","text":"293"},{"range":"312","text":"291"},{"range":"313","text":"293"},{"range":"314","text":"291"},{"range":"315","text":"293"},{"range":"316","text":"291"},{"range":"317","text":"293"},{"range":"318","text":"291"},{"range":"319","text":"293"},{"range":"320","text":"291"},{"range":"321","text":"293"},{"range":"322","text":"291"},{"range":"323","text":"293"},"Update the dependencies array to be: [fetchResponses]",{"range":"324","text":"325"},{"range":"326","text":"291"},{"range":"327","text":"293"},{"range":"328","text":"291"},{"range":"329","text":"293"},"Wrap the definition of 'fetchData' in its own useCallback() Hook.",{"range":"330","text":"331"},"Wrap the definition of 'loadUserProfile' in its own useCallback() Hook.",{"range":"332","text":"333"},[834,837],"unknown",[834,837],"never",[35779,35782],[35779,35782],[945,951],"[fetchChatRooms, setupRealtimeSubscription, user]",[2137,2140],[2137,2140],[2718,2721],[2718,2721],[13094,13104],"[fetchSurveys, user?.id]",[14071,14074],[14071,14074],[14204,14207],[14204,14207],[14389,14392],[14389,14392],[15077,15080],[15077,15080],[15785,15788],[15785,15788],[16524,16527],[16524,16527],[19172,19175],[19172,19175],[19510,19513],[19510,19513],[21318,21321],[21318,21321],[33729,33732],[33729,33732],[33837,33839],"[fetchResponses]",[34621,34624],[34621,34624],[7056,7059],[7056,7059],[2298,5448],"useCallback(async () => {\n    if (!user?.id) {\n      console.log('No user ID available, skipping data fetch');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n\n      // Fetch available surveys\n      const { data: surveysData, error: surveysError } = await supabase\n        .from('surveys')\n        .select(`\n          *,\n          client:users!surveys_client_id_fkey(name, email),\n          questions(*)\n        `)\n        .eq('status', 'active')\n        .order('created_at', { ascending: false });\n\n      if (surveysError) throw surveysError;\n\n      // Check which surveys the user has already responded to\n      const { data: userResponses, error: responsesError } = await supabase\n        .from('responses')\n        .select('survey_id')\n        .eq('monitor_id', user?.id);\n\n      if (responsesError) throw responsesError;\n\n      const respondedSurveyIds = userResponses.map(r => r.survey_id);\n      const availableSurveys = surveysData.filter(survey => \n        !respondedSurveyIds.includes(survey.id)\n      );\n\n      setSurveys(availableSurveys);\n\n      // Fetch user's responses\n      const { data: responsesData, error: responsesError2 } = await supabase\n        .from('responses')\n        .select(`\n          *,\n          survey:surveys(title, points_reward)\n        `)\n        .eq('monitor_id', user?.id)\n        .order('completed_at', { ascending: false });\n\n      if (responsesError2) throw responsesError2;\n      setResponses(responsesData || []);\n\n      // Fetch point transactions\n      const { data: transactionsData, error: transactionsError } = await supabase\n        .from('point_transactions')\n        .select(`\n          *,\n          survey:surveys(title)\n        `)\n        .eq('monitor_id', user?.id)\n        .order('created_at', { ascending: false })\n        .limit(10);\n\n      if (transactionsError) throw transactionsError;\n      setPointTransactions(transactionsData || []);\n\n      // Fetch advertisements\n      // Get user's location from profile\n      const userLocation = user?.profile?.location;\n      \n      const { data: adsData, error: adsError } = await supabase\n        .from('advertisements')\n        .select('*, target_regions, priority')\n        .eq('is_active', true)\n        .order('priority', { ascending: false })\n        .order('display_order', { ascending: true });\n\n      if (adsError) throw adsError;\n\n      // Filter and prioritize advertisements based on user location\n      let filteredAds = adsData || [];\n      \n      if (userLocation) {\n        // Separate regional and general ads\n        const regionalAds = filteredAds.filter(ad => \n          ad.target_regions && ad.target_regions.length > 0 && \n          ad.target_regions.includes(userLocation)\n        );\n        \n        const generalAds = filteredAds.filter(ad => \n          !ad.target_regions || ad.target_regions.length === 0\n        );\n        \n        // Prioritize regional ads first, then general ads\n        filteredAds = [...regionalAds, ...generalAds];\n      }\n      \n      setAdvertisements(filteredAds);\n\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  })",[4168,12041],"useCallback(async (userId: string) => {\n    // 同じユーザーのプロファイルを既に読み込み中/済みの場合はスキップ\n    if (currentUserId.current === userId && user && !isLoadingProfile.current) {\n      console.log('Profile already loaded for user:', userId);\n      setLoading(false);\n      return;\n    }\n    \n    // 既に同じユーザーのプロファイルを読み込み中の場合はスキップ\n    if (isLoadingProfile.current && currentUserId.current === userId) {\n      console.log('Profile loading already in progress for user:', userId);\n      return;\n    }\n    \n    // プロファイル読み込み中フラグを設定\n    isLoadingProfile.current = true;\n    currentUserId.current = userId; // Set current user ID immediately\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const loadUserProfileWithRetry = async (userId: string, retryCount = 0): Promise<void> => {\n      const maxRetries = 2;\n      const retryDelay = 500; // 0.5 seconds\n\n      try {\n        console.log(`Loading user profile for: ${userId} (attempt ${retryCount + 1})`);\n        \n        // Special handling for admin@example.com and support@example.com\n        const authUser = await supabase.auth.getUser();\n        if (authUser.data.user?.email === 'admin@example.com') {\n          console.log('Admin user detected, creating admin profile...');\n          const adminUser = await ensureAdminProfile(userId);\n          if (adminUser) {\n            console.log('Admin profile ensured, setting user state');\n            setUser(adminUser);\n            currentUserId.current = userId;\n            isLoadingProfile.current = false;\n            setLoading(false);\n            return;\n          }\n        } else if (authUser.data.user?.email === 'support@example.com') {\n          console.log('Support user detected, creating support profile...');\n          const supportUser = await ensureSupportProfile(userId);\n          if (supportUser) {\n            console.log('Support profile ensured, setting user state:', supportUser);\n            setUser(supportUser);\n            currentUserId.current = userId;\n            isLoadingProfile.current = false;\n            setLoading(false);\n            return;\n          } else {\n            console.log('Failed to ensure support profile, user will be signed out');\n            // サポートプロファイルの作成に失敗した場合、ユーザーをサインアウト\n            await supabase.auth.signOut();\n            setUser(null);\n            currentUserId.current = null;\n            isLoadingProfile.current = false;\n            setLoading(false);\n            return;\n          }\n        }\n        \n        // First, fetch the basic user information\n        const { data: userData, error: userError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', userId)\n          .maybeSingle();\n\n        if (userError) {\n          // Network/fetch errors\n          if (userError.message?.includes('Failed to fetch') || userError.message?.includes('fetch')) {\n            throw new Error('Supabaseへの接続に失敗しました。環境変数の設定を確認してください。');\n          }\n          \n          // Check if it's a \"no rows returned\" error and we can retry\n          if (userError.code === 'PGRST116' && retryCount < maxRetries) {\n            console.log(`User not found, retrying in ${retryDelay}ms... (attempt ${retryCount + 1}/${maxRetries})`);\n            await new Promise(resolve => setTimeout(resolve, retryDelay));\n            return loadUserProfileWithRetry(userId, retryCount + 1);\n          }\n          \n          console.error('User fetch error:', userError);\n          // Don't set error for missing user during initialization - just clear state\n          console.log('User not found, clearing auth state');\n          setUser(null);\n          setLoading(false);\n          currentUserId.current = null;\n          isLoadingProfile.current = false;\n          return;\n        }\n\n        // Handle case where no user profile is found\n        if (!userData) {\n          if (retryCount < maxRetries) {\n            console.log(`No user data found, retrying in ${retryDelay}ms... (attempt ${retryCount + 1}/${maxRetries})`);\n            await new Promise(resolve => setTimeout(resolve, retryDelay));\n            return loadUserProfileWithRetry(userId, retryCount + 1);\n          }\n          \n          console.log('No user profile found for:', userId);\n          setUser(null);\n          setLoading(false);\n          currentUserId.current = null;\n          isLoadingProfile.current = false;\n          return;\n        }\n\n        // Then, fetch the role-specific profile based on the user's role\n        let profileData = null;\n        \n        if (userData.role === 'monitor') {\n          const { data: monitorProfile, error: monitorError } = await supabase\n            .from('monitor_profiles')\n            .select('*')\n            .eq('user_id', userId)\n            .maybeSingle();\n            \n          if (monitorError) {\n            console.error('Monitor profile fetch error:', monitorError);\n          } else {\n            profileData = monitorProfile;\n          }\n        } else if (userData.role === 'client') {\n          const { data: clientProfile, error: clientError } = await supabase\n            .from('client_profiles')\n            .select('*')\n            .eq('user_id', userId)\n            .maybeSingle();\n            \n          if (clientError) {\n            console.error('Client profile fetch error:', clientError);\n          } else {\n            profileData = clientProfile;\n          }\n        }\n\n        // Combine user data with profile data\n        const userProfile: User = {\n          ...userData,\n          profile: profileData\n        };\n\n        console.log('User profile loaded successfully');\n        setUser(userProfile);\n        currentUserId.current = userId; // Confirm user ID is set\n        isLoadingProfile.current = false;\n        setLoading(false);\n      } catch (error) {\n        if (retryCount < maxRetries) {\n          console.log(`Error loading profile, retrying in ${retryDelay}ms... (attempt ${retryCount + 1}/${maxRetries})`);\n          await new Promise(resolve => setTimeout(resolve, retryDelay));\n          return loadUserProfileWithRetry(userId, retryCount + 1);\n        }\n        \n        console.error('Error loading user profile:', error);\n        \n        // Set appropriate error message\n        if (error instanceof Error && error.message.includes('Supabaseへの接続に失敗')) {\n          setError(error.message);\n        } else {\n          console.log('Error loading profile, clearing auth state');\n        }\n        \n        // サインアップ中の場合は、プロファイル作成の遅延を考慮してもう少し待つ\n        if (isSigningUp.current) {\n          console.log('User profile not found during signup, waiting longer...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          \n          // 再度確認\n          const { data: retryUserData, error: retryError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', userId)\n            .maybeSingle();\n            \n          if (!retryError && retryUserData) {\n            // 見つかった場合は処理を続行\n            console.log('User profile found on retry');\n            // 処理を続行するために再帰呼び出し\n            return loadUserProfileWithRetry(userId, 0);\n          }\n        }\n        \n        setUser(null);\n        setLoading(false);\n        currentUserId.current = null;\n        isLoadingProfile.current = false;\n        isLoadingProfile.current = false;\n      }\n    };\n\n    try {\n      await loadUserProfileWithRetry(userId);\n    } catch (error) {\n      console.error('Error loading user profile:', error);\n      \n      // Set appropriate error message for network issues\n      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {\n        setError('Supabaseへの接続に失敗しました。環境変数の設定を確認し、開発サーバーを再起動してください。');\n      } else {\n        console.log('Error in loadUserProfile, clearing auth state');\n      }\n      \n      setUser(null);\n      setLoading(false);\n      currentUserId.current = null;\n    }\n  })"]